"""
Insert

컬렉션의 엔티티는 동일한 필드 집합을 공유하는 데이터 레코드입니다. 모든 데이터 레코드의 필드 값은 엔티티를 구성합니다.
컬렉션이 생성된 후 새 필드를 동적으로 추가하고 엔티티를 삽입할 때 이러한 필드에 대한 값을 지정하지 않으면 Milvus 는 정의된 기본값또는 기본값이 설정되지 않은 경우 NULL 로 해당 필드를 자동으로 채움

- 컬렉션 생성 후 추가된 필드
- 중복 처리: 표준 Insert 작업은 중복된 기본 키를 확인하지 않음. upsert 작업을 대신 사용.

엔티티는 동일한 스키마를 공유하는 컬렉션의 데이터 레코드를 의미.
행의 각 필드에 있는 데이터가 엔티티를 구성.
동일한 컬렉션 내의 엔티티는 동일한 속성(필드 이름, 데이터 유형 및 기타 제약 조건 등) 갖음

데이터 삽입 순서는 _default 파티션
특정 파티션이 존재하는 경우, 삽입 요청에 파티션 이름을 지정하여 해당 파티션에 엔티티를 삽입할 수도 있음.

동적 필드도 지원
"""
from pymilvus import MilvusClient

client = MilvusClient(
    uri="http://localhost:19530",
    token="root:Milvus"
)

if client.has_collection(collection_name="quick_setup"):
    client.drop_collection(collection_name="quick_setup")
client.create_collection(
    collection_name="quick_setup",
    dimension=5,
)

# 엔티티 삽입
data = [
    {"id": 0,
     "vector": [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592],
     "color": "pink_8682"},
    {"id": 1,
     "vector": [0.19886812562848388, 0.06023560599112088, 0.6976963061752597, 0.2614474506242501, 0.838729485096104],
     "color": "red_7025"},
    {"id": 2,
     "vector": [0.43742130801983836, -0.5597502546264526, 0.6457887650909682, 0.7894058910881185, 0.20785793220625592],
     "color": "orange_6781"},
    {"id": 3,
     "vector": [0.3172005263489739, 0.9719044792798428, -0.36981146090600725, -0.4860894583077995, 0.95791889146345],
     "color": "pink_9298"},
    {"id": 4,
     "vector": [0.4452349528804562, -0.8757026943054742, 0.8220779437047674, 0.46406290649483184, 0.30337481143159106],
     "color": "red_4794"},
    {"id": 5,
     "vector": [0.985825131989184, -0.8144651566660419, 0.6299267002202009, 0.1206906911183383, -0.1446277761879955],
     "color": "yellow_4222"},
    {"id": 6, "vector": [0.8371977790571115, -0.015764369584852833, -0.31062937026679327, -0.562666951622192,
                         -0.8984947637863987], "color": "red_9392"},
    {"id": 7,
     "vector": [-0.33445148015177995, -0.2567135004164067, 0.8987539745369246, 0.9402995886420709, 0.5378064918413052],
     "color": "grey_8510"},
    {"id": 8,
     "vector": [0.39524717779832685, 0.4000257286739164, -0.5890507376891594, -0.8650502298996872, -0.6140360785406336],
     "color": "white_9381"},
    {"id": 9, "vector": [0.5718280481994695, 0.24070317428066512, -0.3737913482606834, -0.06726932177492717,
                         -0.6980531615588608], "color": "purple_4976"}
]

res = client.insert(
    collection_name="quick_setup",
    data=data
)

print(res)

# 파티션에 엔티티 삽입
data = [
    {"id": 10,
     "vector": [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592],
     "color": "pink_8682"},
    {"id": 11,
     "vector": [0.19886812562848388, 0.06023560599112088, 0.6976963061752597, 0.2614474506242501, 0.838729485096104],
     "color": "red_7025"},
    {"id": 12,
     "vector": [0.43742130801983836, -0.5597502546264526, 0.6457887650909682, 0.7894058910881185, 0.20785793220625592],
     "color": "orange_6781"},
    {"id": 13,
     "vector": [0.3172005263489739, 0.9719044792798428, -0.36981146090600725, -0.4860894583077995, 0.95791889146345],
     "color": "pink_9298"},
    {"id": 14,
     "vector": [0.4452349528804562, -0.8757026943054742, 0.8220779437047674, 0.46406290649483184, 0.30337481143159106],
     "color": "red_4794"},
    {"id": 16, "vector": [0.8371977790571115, -0.015764369584852833, -0.31062937026679327, -0.562666951622192,
                          -0.8984947637863987], "color": "red_9392"},
    {"id": 17,
     "vector": [-0.33445148015177995, -0.2567135004164067, 0.8987539745369246, 0.9402995886420709, 0.5378064918413052],
     "color": "grey_8510"},
    {"id": 18,
     "vector": [0.39524717779832685, 0.4000257286739164, -0.5890507376891594, -0.8650502298996872, -0.6140360785406336],
     "color": "white_9381"},
    {"id": 19, "vector": [0.5718280481994695, 0.24070317428066512, -0.3737913482606834, -0.06726932177492717,
                          -0.6980531615588608], "color": "purple_4976"}
]
# 파티션 생성
client.create_partition(
    collection_name="quick_setup",
    partition_name="partitionA"
)

res = client.insert(
    collection_name="quick_setup",
    partition_name="partitionA",
    data=data
)

print(res)

################################################################################################################################################################################################
"""
Upsert
키가 이미 존재하면 해당 엔티티가 업데이트되고 그렇지 않으면 새 엔티티가 삽입
새 필드를 동적으로 추가하고 엔티티를 삽입할 떄 이러한 필드에 대한 값을 지정하지 않으면 기본값 또는 NULL 로 자동으로 채움

Upsert 요청 처리 과정
1. 컬렉션의 기본 필드에 AutoId 가 활성화되었는지 확인
    1-1. 활성화된 경우, Milvus 는 엔티티의 기본 키를 자동으로 생성된 기본 키로 대체하고 데이터 삽입
    1-2. 그렇지 않은 경우,Milvus 는 엔티티가 가지고 있는 기본 키를 사용하여 데이터를 삽입
2. Upsert 요청에 포함된 엔티티의 기본 키 값을 기반으로 삭제 작업을 수
"""

client = MilvusClient(
    uri="http://localhost:19530",
    token="root:Milvus"
)

data = [
    {"id": 0,
     "vector": [-0.619954382375778, 0.4479436794798608, -0.17493894838751745, -0.4248030059917294, -0.8648452746018911],
     "color": "black_9898"},
    {"id": 1,
     "vector": [0.4762662251462588, -0.6942502138717026, -0.4490002642657902, -0.628696575798281, 0.9660395877041965],
     "color": "red_7319"},
    {"id": 2,
     "vector": [-0.8864122635045097, 0.9260170474445351, 0.801326976181461, 0.6383943392381306, 0.7563037341572827],
     "color": "white_6465"},
    {"id": 3,
     "vector": [0.14594326235891586, -0.3775407299900644, -0.3765479013078812, 0.20612075380355122, 0.4902678929632145],
     "color": "orange_7580"},
    {"id": 4,
     "vector": [0.4548498669607359, -0.887610217681605, 0.5655081329910452, 0.19220509387904117, 0.016513983433433577],
     "color": "red_3314"},
    {"id": 5,
     "vector": [0.11755001847051827, -0.7295149788999611, 0.2608115847524266, -0.1719167007897875, 0.7417611743754855],
     "color": "black_9955"},
    {"id": 6,
     "vector": [0.9363032158314308, 0.030699901477745373, 0.8365910312319647, 0.7823840208444011, 0.2625222076909237],
     "color": "yellow_2461"},
    {"id": 7,
     "vector": [0.0754823906014721, -0.6390658668265143, 0.5610517334334937, -0.8986261118798251, 0.9372056764266794],
     "color": "white_5015"},
    {"id": 8,
     "vector": [-0.3038434006935904, 0.1279149203380523, 0.503958664270957, -0.2622661156746988, 0.7407627307791929],
     "color": "purple_6414"},
    {"id": 9, "vector": [-0.7125086947677588, -0.8050968321012257, -0.32608864121785786, 0.3255654958645424,
                         0.26227968923834233], "color": "brown_7231"}
]

res = client.upsert(
    collection_name='quick_setup',
    data=data
)

print(res)

# 기존 컬렉션 제거
if client.has_collection(collection_name="auto_id_demo"):
    client.drop_collection(collection_name="auto_id_demo")

# 컬렉션 생성 (auto_id=True, dimension은 vector 필드 안에 정의)
client.create_collection(
    collection_name="auto_id_demo",
    auto_id=True,
    primary_field="id",
    dimension=5,
)
# ID 없이 데이터 삽입 (auto_id가 작동)
data = [
    {
        "vector": [0.1, 0.2, 0.3, 0.4, 0.5],
        "color": "red"
    },
    {
        "vector": [0.2, 0.3, 0.4, 0.5, 0.6],
        "color": "blue"
    }
]

res = client.insert(
    collection_name="auto_id_demo",
    data=data
)

print(res)
print(res.get("ids")[0])
data = [
    {
        "id": res.get("ids")[0],
        "vector": [0.1, 0.2, 0.3, 0.4, 0.5],
        "color": "kkk"
    }
]

res = client.upsert(
    collection_name="auto_id_demo",
    data=data
)
print(res)

# upsert 일 경우 ID 가 갱신 된다.

################################################################################################################################################################################################

"""
Delete

조건 또는 기본 키를 필터링하여 더 이상 필요하지 않은 엔티티를 삭제할 수 있음

- 조건을 필터링하여 엔티티 삭제
- 기본 키로 엔티티 삭제
- 파티션에서 엔티티 삭제

"""

# 조건 필터링
res = client.delete(
    collection_name="quick_setup",
    filter="color in ['white_9381','grey_8510']"
)

print(res)

# 기본 키로 엔티티 삭제
res = client.delete(
    collection_name="quick_setup",
    ids=[3, 4, 5, 6, 7]
)

print(res)

# 파티션에서 삭제
res = client.delete(
    collection_name="quick_setup",
    ids=[16, 19],
    partition_name="partitionA"
)

print(res)
